-> Product;
//
PositiveInteger = Integer<1..>;

NotAnOddInteger <: Null;
oddInteger = ^Integer => Integer @ NotAnOddInteger :: {
    ({#} % {2}) ?== { # | @ NotAnOddInteger() }
};
OddInteger <: Integer @ NotAnOddInteger :: {
    ({#} % {2}) ?== { # | @ NotAnOddInteger() }
};

max = ^[a: Integer, b: Integer] => Integer :: {#a};
max2 = ^[Integer, Integer] => Integer :: {#0};

InvalidRange <: Null;
Range <: [from: Integer, to: Integer] @ InvalidRange :: {
    ({#from} < {#to}) ?== { # | @ InvalidRange() }
};
Range2 <: [Integer, Integer] @ InvalidRange :: {
    ({#0} < {#1}) ?== { # | @ InvalidRange() }
};
FromTo = [from: Integer, to: Integer];
Range3 <: FromTo @ InvalidRange :: {
    ({#.from} < {#.to}) ?== { # | @ InvalidRange() }
};

main = ^Array<String> => Any @@ :: [
    oddInteger(5),
    OddInteger(5),
    Range([14, 23]),
    Range2([14, 23]),
    Range3([from: 14, to: 23]),
    max([3, 5]),
    max2([3, 5])
];

