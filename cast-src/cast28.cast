-> Product;

SurveyTitle = String<1..80>;
Link = (String<1..255>|Null);
SurveyDescription = (String|Null);
RepeatableSurvey = Boolean;

SurveyTemplateId = Integer<1..>;
SurveyDetails = [~SurveyTitle, ~Link, ~SurveyDescription, ~RepeatableSurvey];
SurveyTemplate = [~SurveyTemplateId, ~SurveyDetails];

SurveyTemplate ==> BoundParameters :: [
    id: $.surveyTemplateId,
    surveyTitle: $.surveyDetails.surveyTitle,
    link: $.surveyDetails.link,
    surveyDescription: $.surveyDetails.surveyDescription,
    repeatableSurvey: 1
];

QueryResultRow ==> SurveyTemplate @ (MapItemNotFound|NoCastAvailable|HydrationFailed) :: [
    surveyTemplateId: {$->item("id")}->as(SurveyTemplateId),
    surveyDetails: [
        surveyTitle: {$->item("surveyTitle")}->as(SurveyTitle),
        link: {$->item("link")}->as(Link),
        surveyDescription: {$->item("surveyTitle")}->as(SurveyDescription),
        repeatableSurvey: {{$->item("repeatableSurvey")} == 1}->as(RepeatableSurvey)
    ]
];

TemplateNotFound <: [~SurveyTemplateId];
TemplateAdded <: [~SurveyTemplateId];
TemplateUpdated <: [~SurveyTemplateId];
TemplateRemoved <: [~SurveyTemplateId];

SurveyTemplateRepository = [
    byId: ^[~SurveyTemplateId] => SurveyTemplate @@ TemplateNotFound,
    store: ^[~SurveyTemplate] => (TemplateAdded|TemplateUpdated) @@,
    remove: ^[~SurveyTemplateId] => TemplateRemoved @@ TemplateNotFound,
    all: ^Null => Array<SurveyTemplate> @@
];

DatabaseSurveyTemplateRepository <: [~DatabaseConnection];

DatabaseSurveyTemplateRepository ==> SurveyTemplateRepository :: [
    byId: ^[~SurveyTemplateId] => SurveyTemplate @@ TemplateNotFound :: {
        data = $.databaseConnection->query[query: "SELECT id, survey_title AS surveyTitle, link, survey_description AS surveyDescription, repeatable_survey AS repeatableSurvey FROM survey_templates WHERE id = ?", boundParameters: [#.surveyTemplateId]];
        row = @{data->item(0)};
        (row) ?<: {
            | ArrayItemNotFound: @ TemplateNotFound[#.surveyTemplateId]
            | QueryResultRow: row->as(SurveyTemplate)
        }
    },
    store: ^[~SurveyTemplate] => (TemplateAdded|TemplateUpdated) @@ :: {
        data = $.databaseConnection->query[query: "SELECT id, survey_title AS surveyTitle, link, survey_description AS surveyDescription, repeatable_survey AS repeatableSurvey FROM survey_templates WHERE id = ?", boundParameters: [#.surveyTemplate.surveyTemplateId]];
        row = @{data->item(0)};
        (row) ?<: {
            | ArrayItemNotFound: {
                params = #.surveyTemplate->as(BoundParameters);
                $.databaseConnection->execute[
                    query: "INSERT INTO survey_templates
                        (id, survey_title, link, survey_description, repeatable_survey) VALUES
                        (:id, :surveyTitle, :link, :surveyDescription, :repeatableSurvey)",
                    boundParameters: params
                ];
                TemplateAdded[#.surveyTemplate.surveyTemplateId]
            }
            | QueryResultRow: {
                params = #.surveyTemplate->as(BoundParameters);
                $.databaseConnection->execute[
                    query: "UPDATE survey_templates SET
                        survey_title = :surveyTitle,
                        link = :link,
                        survey_description = :surveyDescription,
                        repeatable_survey = :repeatableSurvey
                        WHERE id = :id",
                    boundParameters: params
                ];
                TemplateUpdated[#.surveyTemplate.surveyTemplateId]
            }
        }
    },
    remove: ^[~SurveyTemplateId] => TemplateRemoved @@ TemplateNotFound :: {
        data = $.databaseConnection->query[query: "SELECT id, survey_title AS surveyTitle, link, survey_description AS surveyDescription, repeatable_survey AS repeatableSurvey FROM survey_templates WHERE id = :surveyTemplateId", boundParameters: #];
        row = @{data->item(0)};
        (row) ?<: {
            | ArrayItemNotFound: @ TemplateNotFound[#.surveyTemplateId]
            | QueryResultRow: {
                $.databaseConnection->execute[
                    query: "DELETE FROM survey_templates WHERE id = :surveyTemplateId",
                    boundParameters: #
                ];
                TemplateRemoved(#)
            }
        }
    },
    all: ^Null => Array<SurveyTemplate> @@ :: {
        data = $.databaseConnection->query[
            query: "SELECT id, survey_title AS surveyTitle, link, survey_description AS surveyDescription, repeatable_survey AS repeatableSurvey FROM survey_templates",
            boundParameters: []
        ];
        data->map(^QueryResultRow => SurveyTemplate :: #->as(SurveyTemplate))
    }
];


MyInteger = Integer<1..12>;

x = ^Null => Array<Integer> :: {
    [
        {12}->as(MyInteger),
        {12}->as(Integer<1..12>)
    ]
};

TemplateService = [
    updateDetails: ^[~SurveyTemplateId, ~SurveyDetails] => Any @@,
    createSurveyTemplate: ^[~SurveyTitle] => Any @@,
    deleteSurveyTemplate: ^[~SurveyTemplateId] => Any @@
];

TemplateServiceX <: [~SurveyTemplateRepository];

TemplateServiceX ==> TemplateService :: [
    updateDetails: ^[~SurveyTemplateId, ~SurveyDetails] => Any @@ :: {
        tpl = $.surveyTemplateRepository.byId[#.surveyTemplateId];
        tpl = tpl->with[surveyDetails: #.surveyDetails];
        @@{$.surveyTemplateRepository.store[tpl]}
    },
    createSurveyTemplate: ^[~SurveyTitle] => Any @@ :: {
        tpl = [surveyTemplateId: 10, surveyDetails: [
            surveyTitle: #.surveyTitle,
            link: null,
            surveyDescription: null,
            repeatableSurvey: false
        ]];
        @@{$.surveyTemplateRepository.store[tpl]}
    },
    deleteSurveyTemplate: ^[~SurveyTemplateId] => Any @@ :: {
        @@{$.surveyTemplateRepository.remove(#)}
    }
];


createSurveyTemplateParams = ^[String] => [~SurveyTitle] @ (InvalidJsonValue|HydrationFailed) :: {
    t = {#.0}->jsonStringToValue;
    t->hydrateAs([~SurveyTitle])
};

updateDetailsParams = ^[String, String] => [~SurveyTemplateId, ~SurveyDetails] @ (InvalidJsonValue|HydrationFailed) :: {
    t = {#.0}->jsonStringToValue;
    v = {#.1}->jsonStringToValue;
    [surveyTemplateId: t->hydrateAs(SurveyTemplateId), surveyDetails: v->hydrateAs(SurveyDetails)]
};

deleteSurveyTemplateParams = ^[String] => SurveyTemplateId @ (InvalidJsonValue|HydrationFailed) :: {
    t = {#.0}->jsonStringToValue;
    t->hydrateAs(SurveyTemplateId)
};

handleCreateSurveyTemplate = ^[service: TemplateService, params: Array<String>] => Any @@ :: {
    (#params) ?<: {
        | [String]: #service.createSurveyTemplate(createSurveyTemplateParams(#params))
        | ~: "Error 400 a"
    }
};

handleUpdateDetails = ^[service: TemplateService, params: Array<String>] => Any @@ :: {
    (#params) ?<: {
        | [String, String]: #service.updateDetails(updateDetailsParams(#params))
        | ~: "Error 400 b"
    }
};

handleDeleteSurveyTemplate = ^[service: TemplateService, params: Array<String>] => Any @@ :: {
    (#params) ?<: {
        | [String]: #service.deleteSurveyTemplate[surveyTemplateId: deleteSurveyTemplateParams(#params)]
        | ~: "Error 400 b"
    }
};

main = ^Array<String> => Any @@ :: {
    connection = DatabaseConnection["sqlite:db.sqlite"];
    repo = {DatabaseSurveyTemplateRepository[connection]}->as(SurveyTemplateRepository);
    templateService = {TemplateServiceX[repo]}->as(TemplateService);

    a = (#) ?<: {
        | Array<String, 1..>: {
            v = #->withoutFirst;
            params = v.array;
            (v.element) ?= {
                | "createSurveyTemplate": handleCreateSurveyTemplate[templateService, params]
                | "updateDetails": handleUpdateDetails[templateService, params]
                | "deleteSurveyTemplate": handleDeleteSurveyTemplate[templateService, params]
                | ~: "Error 404 b"
            }
        }
        | ~: "Error 404 a"
    };
    [
        x(),
        a,
        repo.all()
    ]
};
