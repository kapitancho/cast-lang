-> Product;
//

SurveyTitle = String<1..80>;
Link = (String<1..255>|Null);
SurveyDescription = (String|Null);
RepeatableSurvey = Boolean;

SurveyTemplateId = Integer<1..>;
SurveyDetails = [~SurveyTitle, ~Link, ~SurveyDescription, ~RepeatableSurvey];
SurveyTemplate = [~SurveyTemplateId, ~SurveyDetails];

SurveyTemplate ==> BoundParameters :: {
    boolToInt = ^Boolean => Integer :: {
        (#) ?== { 1 | 0 }
    };
    [
        id: $.surveyTemplateId,
        surveyTitle: $.surveyDetails.surveyTitle,
        link: $.surveyDetails.link,
        surveyDescription: $.surveyDetails.surveyDescription,
        repeatableSurvey: boolToInt($.surveyDetails.repeatableSurvey)
    ]
};

QueryResultRow ==> SurveyTemplate @ (MapItemNotFound|NoCastAvailable|HydrationFailed) :: [
    surveyTemplateId: {$->item("id")}->as(SurveyTemplateId),
    surveyDetails: [
        surveyTitle: {$->item("surveyTitle")}->as(SurveyTitle),
        link: {$->item("link")}->as(Link),
        surveyDescription: {$->item("surveyTitle")}->as(SurveyDescription),
        repeatableSurvey: {{$->item("repeatableSurvey")} == 1}->as(RepeatableSurvey)
    ]
];

TemplateNotFound <: [~SurveyTemplateId];
TemplateAdded <: [~SurveyTemplateId];
TemplateUpdated <: [~SurveyTemplateId];
TemplateRemoved <: [~SurveyTemplateId];

SurveyTemplateRepository = [
    byId: ^[~SurveyTemplateId] => SurveyTemplate @@ TemplateNotFound,
    store: ^[~SurveyTemplate] => (TemplateAdded|TemplateUpdated) @@,
    remove: ^[~SurveyTemplateId] => TemplateRemoved @@ TemplateNotFound,
    all: ^Null => Array<SurveyTemplate> @@
];

DatabaseSurveyTemplateRepository <: [~DatabaseConnection];

DatabaseSurveyTemplateRepository ==> SurveyTemplateRepository :: [
    byId: ^[~SurveyTemplateId] => SurveyTemplate @@ TemplateNotFound :: {
        data = $.databaseConnection->query[query: "SELECT id, survey_title AS surveyTitle, link, survey_description AS surveyDescription, repeatable_survey AS repeatableSurvey FROM survey_templates WHERE id = ?", boundParameters: [#.surveyTemplateId]];
        row = @{data->item(0)};
        (row) ?<: {
            | ArrayItemNotFound: @ TemplateNotFound[#.surveyTemplateId]
            | QueryResultRow: row->as(SurveyTemplate)
        }
    },
    store: ^[~SurveyTemplate] => (TemplateAdded|TemplateUpdated) @@ :: {
        data = $.databaseConnection->query[query: "SELECT id, survey_title AS surveyTitle, link, survey_description AS surveyDescription, repeatable_survey AS repeatableSurvey FROM survey_templates WHERE id = ?", boundParameters: [#.surveyTemplate.surveyTemplateId]];
        row = @{data->item(0)};
        (row) ?<: {
            | ArrayItemNotFound: {
                params = #.surveyTemplate->as(BoundParameters);
                $.databaseConnection->execute[
                    query: "INSERT INTO survey_templates
                        (id, survey_title, link, survey_description, repeatable_survey) VALUES
                        (:id, :surveyTitle, :link, :surveyDescription, :repeatableSurvey)",
                    boundParameters: params
                ];
                TemplateAdded[#.surveyTemplate.surveyTemplateId]
            }
            | QueryResultRow: {
                params = #.surveyTemplate->as(BoundParameters);
                $.databaseConnection->execute[
                    query: "UPDATE survey_templates SET
                        survey_title = :surveyTitle,
                        link = :link,
                        survey_description = :surveyDescription,
                        repeatable_survey = :repeatableSurvey
                        WHERE id = :id",
                    boundParameters: params
                ];
                TemplateUpdated[#.surveyTemplate.surveyTemplateId]
            }
        }
    },
    remove: ^[~SurveyTemplateId] => TemplateRemoved @@ TemplateNotFound :: {
        data = $.databaseConnection->query[query: "SELECT id, survey_title AS surveyTitle, link, survey_description AS surveyDescription, repeatable_survey AS repeatableSurvey FROM survey_templates WHERE id = :surveyTemplateId", boundParameters: #];
        row = @{data->item(0)};
        (row) ?<: {
            | ArrayItemNotFound: @ TemplateNotFound[#.surveyTemplateId]
            | QueryResultRow: {
                $.databaseConnection->execute[
                    query: "DELETE FROM survey_templates WHERE id = :surveyTemplateId",
                    boundParameters: #
                ];
                TemplateRemoved(#)
            }
        }
    },
    all: ^Null => Array<SurveyTemplate> @@ :: {
        data = $.databaseConnection->query[
            query: "SELECT id, survey_title AS surveyTitle, link, survey_description AS surveyDescription, repeatable_survey AS repeatableSurvey FROM survey_templates",
            boundParameters: []
        ];
        data->map(^QueryResultRow => SurveyTemplate :: #->as(SurveyTemplate))
    }
];

TemplateService = [
    updateDetails: ^[~SurveyTemplateId, ~SurveyDetails] => TemplateUpdated @@ TemplateNotFound,
    createSurveyTemplate: ^[~SurveyTitle] => TemplateAdded @@,
    deleteSurveyTemplate: ^[~SurveyTemplateId] => TemplateRemoved @@ TemplateNotFound,
    byId: ^[~SurveyTemplateId] => SurveyTemplate @@ TemplateNotFound,
    allSurveyTemplates: ^Null => Array<SurveyTemplate> @@
];

TemplateServiceX <: [~SurveyTemplateRepository];

TemplateServiceX ==> TemplateService :: [
    updateDetails: ^[~SurveyTemplateId, ~SurveyDetails] => TemplateUpdated @@ TemplateNotFound :: {
        tpl = $.surveyTemplateRepository.byId[#.surveyTemplateId];
        tpl = tpl->with[surveyDetails: #.surveyDetails];
        $.surveyTemplateRepository.store[tpl];
        TemplateUpdated[#.surveyTemplateId]
    },
    createSurveyTemplate: ^[~SurveyTitle] => TemplateAdded @@ :: {
        tpl = [surveyTemplateId: 10, surveyDetails: [
            surveyTitle: #.surveyTitle,
            link: null,
            surveyDescription: null,
            repeatableSurvey: false
        ]];
        $.surveyTemplateRepository.store[tpl];
        TemplateAdded[tpl.surveyTemplateId]
    },
    deleteSurveyTemplate: ^[~SurveyTemplateId] => TemplateRemoved @@ TemplateNotFound :: {
        $.surveyTemplateRepository.remove(#)
    },
    byId: ^[~SurveyTemplateId] => SurveyTemplate @@ TemplateNotFound :: {
        $.surveyTemplateRepository.byId(#)
    },
    allSurveyTemplates: ^Null => Array<SurveyTemplate> @@ :: {
        $.surveyTemplateRepository.all()
    }
];

TemplateHandler <: [~ResponseFactory, ~TemplateService];
TemplateHandler ==> HttpRequestHandler :: {
    getTemplateId = ^[request: HttpRequest] => SurveyTemplateId @ (StringIsNoIntegerNumber|NoCastAvailable) :: {
        {{#.request.requestTarget->substring[start: 1, end: 9999]}->asIntegerNumber}->as(SurveyTemplateId)
    };

    handlePatch = ^[request: HttpRequest] => TemplateUpdated @@ TemplateNotFound :: {
        $.templateService.updateDetails[
            surveyTemplateId: getTemplateId[#.request],
            surveyDetails: {{#.request.body}->jsonStringToValue}->hydrateAs(SurveyDetails)
        ]
    };

    handlePost = ^[request: HttpRequest] => TemplateAdded @@ :: {
        $.templateService.createSurveyTemplate[
            surveyTitle: {{{#.request.body}->jsonStringToValue}->hydrateAs([surveyTitle: SurveyTitle])}.surveyTitle
        ]
    };

    handleDelete = ^[request: HttpRequest] => TemplateRemoved @@ TemplateNotFound :: {
        $.templateService.deleteSurveyTemplate[
            surveyTemplateId: getTemplateId[#.request]
        ]
    };

    handleGet = ^[request: HttpRequest] => (SurveyTemplate|Array<SurveyTemplate>) @@ TemplateNotFound :: {
        templateId = @{getTemplateId[#.request]};
        (templateId) ?<: {
            | SurveyTemplateId: $.templateService.byId[templateId]
            | ~: $.templateService.allSurveyTemplates()
        }
    };

    ^[request: HttpRequest] => HttpResponse :: {
        q = @{(#.request.method) ?= {
            | HttpRequestMethod.PATCH: handlePatch(#)
            | HttpRequestMethod.POST: handlePost(#)
            | HttpRequestMethod.DELETE: @{handleDelete(#)}
            | HttpRequestMethod.GET: @{handleGet(#)}
            | ~: -1
        }};
        (q) ?<: {
            | (SurveyTemplate|Array<SurveyTemplate>): [
                statusCode: 200,
                protocolVersion: #.request.protocolVersion,
                headers: {[
                    ["Content-Type", ["application/json"]]
                ]}->asMap,
                body: q->jsonValueToString
            ]
            | TemplateAdded: [
                statusCode: 201,
                protocolVersion: #.request.protocolVersion,
                headers: [Location: [{"templates/"}->concat({q.surveyTemplateId}->asText)]],
                body: ""
            ]
            | TemplateUpdated: $.responseFactory.createResponse(204)
            | TemplateRemoved: $.responseFactory.createResponse(204)
            | TemplateNotFound: $.responseFactory.createResponse(404)
            | RuntimeError: [
                statusCode: 500,
                protocolVersion: #.request.protocolVersion,
                headers: [:],
                body: {q.error->type}->asText
            ]
            | ~: $.responseFactory.createResponse(405)
        }
    }
};

getContainerConfig = ^Null => ContainerConfiguration :: {
    [
        [DatabaseConnection, [dsn: "sqlite:db.sqlite"]],
        [CompositeHandler, ^[
            defaultHandler: NotFoundHandler,
            ~LookupRouter
        ] => CompositeHandler :: {
            CompositeHandler[#.defaultHandler->as(HttpRequestHandler), [
                #.lookupRouter->as(HttpMiddleware)
            ]]
        }],
        [LookupRouter, [
            routerMapping: {[
                ["/templates", TemplateHandler]
            ]}->asMap
        ]]
    ]
};

handle = ^HttpRequest => HttpResponse @@ :: {
    ctr = Container[getContainerConfig()];
    sx = {ctr->instanceOf(CompositeHandler)}->as(HttpRequestHandler);
    response = sx[#->as(HttpRequest)]
};


main = ^Array<String> => Any @@ :: {
    ctr = Container[getContainerConfig()];
    request = [
        protocolVersion: HttpProtocolVersion.HTTP11,
        headers: [:],
        body: {[surveyTitle: "Survey 1", link: null, surveyDescription: null, repeatableSurvey: true]}
            ->jsonValueToString,
        requestTarget: "/templates/10",
        method: HttpRequestMethod.PATCH
    ];
    sx = {ctr->instanceOf(CompositeHandler)}->as(HttpRequestHandler);
    response = sx[request]
};
