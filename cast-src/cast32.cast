-> Product;
//

ProductId <: Integer<1..>;
ProductTitle = String<1..80>;
ShoppingCart = [items: Array<ShoppingCartItem, 1..>];

GpsCoordinates = [lat: Real<-90..90>, lon: Real<-180..180>];

InvalidProductId <: [~ProductId];
SurveyTitle = String<1..80>;
Suit = :[Spades, Hearts, Diamonds, Clubs];
SpecificErrorOnly <: Integer @ InvalidProductId;
SpecificAndAnyError <: Integer @@ InvalidProductId;
AnyErrorOnly <: Integer @@;
pi = 3.1415927;
gamma = 42;
isCool = true;
isEasy = false;
myEmpty = null;
hello = "World";
myTuple = [3.1415927, "Hello World"];
myRecord = [a: true, b: -42];
myTypeInteger = Integer<0..100>;
myTypeReal = Real<0..100>;
myTypeString = String<1..100>;
myTypeArrayOfString = Array<String, 1..100>;
myTypeMapOfString = Map<String<2..5>, ..100>;
myTypeAny = Any;
myTypeNothing = Nothing;
myTypeBoolean = Boolean;
myTypeTrue = True;
myTypeFalse = False;
myTypeType1 = Type<Integer>;
myTypeType2 = Type<Any>;
myEnumValue = Suit.Hearts;
myEnumValueType = Suit[Hearts];
myFuncType = ^String => Integer;
myFuncTypeWithError = ^String => Integer @ InvalidProductId;

Vector3 <: [Real, Real, Real];

Vector3 ==> Any :: [
    s: ^Null => Real :: {
        {{$.0} + {$.1}} + {$.2}
    },
    binaryPlus: ^Vector3 => Vector3 :: {
        Vector3[{$.0} + {#.0}, {$.1} + {#.1}, {$.2} + {#.2}]
    },
    binaryMultiplication: ^Vector3 => Real :: {
        {{{$.0} * {#.0}} + {{$.1} * {#.1}}} + {{$.2} * {#.2}}
    }
];

Vector3 ==> Invokable :: ^Integer<0..2> => Real :: {
    $->item(#)
};

main = ^Array<String> => Any @@ :: {
    v1 = Vector3[3.2, 1.5, -4.9];
    v2 = Vector3[1.3, -0.5, 2];
    [
        v1,
        v2,
        v1->s,
        v2->s,
        {v1} + {v2},
        {v1} * {v2},
        [v1(0), v1(1), v1(2)],
        "This is a demo page"
    ]
};